type anon_class_24_1 = 
 service {
   addNewAdmin: (vec principal) -> (Result_5);
   createProfile: (ProfileUpdate) -> (Result);
   deleteProfile: (AssetRequest) -> (Result);
   getAdmins: () -> (Result_4);
   getAllProfiles: () -> (Result_3);
   getDiscordHolders: (text) -> (Result_2);
   http_request: (Request) -> (Response) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackResponse) query;
   readProfile: () -> (Result_1) query;
   staticStreamingCallback: (StreamingCallbackToken) ->
    (StreamingCallbackResponse) query;
   updateProfile: (ProfileUpdate) -> (Result);
 };
type WriteAsset = 
 variant {
   Chunk: record {
            callback: opt Callback;
            chunk: blob;
            id: text;
          };
   Init: record {
           callback: opt Callback;
           id: text;
           size: nat;
         };
 };
type TokenIdentifier = text;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Socials = 
 record {
   ceSo: opt CeSo;
   deSo: opt DeSo;
 };
type Result_5 = 
 variant {
   err: Error__1;
   ok;
 };
type Result_4 = 
 variant {
   err: Error__1;
   ok: vec principal;
 };
type Result_3 = 
 variant {
   err: Error__1;
   ok: vec record {
             principal;
             Profile;
           };
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: record {
         opt Profile;
         opt Asset;
       };
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type ProfileUpdate = 
 record {
   avatarRequest: AssetRequest;
   bio: Bio;
 };
type Profile = 
 record {
   bio: Bio;
   id: principal;
 };
type InitOptions = record {admins: vec principal;};
type HeaderField = 
 record {
   text;
   text;
 };
type Error__1 = 
 variant {
   AlreadyExists;
   AuthorizedPrincipalLimitReached: nat;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotAuthorized;
   NotFound;
   Unauthorized;
 };
type Error = 
 variant {
   AlreadyExists;
   AuthorizedPrincipalLimitReached: nat;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotAuthorized;
   NotFound;
   Unauthorized;
 };
type DeSo = 
 record {
   distrikt: opt text;
   dscvr: opt text;
   openChat: opt text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CeSo = 
 record {
   discord: opt text;
   facebook: opt text;
   instagram: opt text;
   tiktok: opt text;
   twitter: opt text;
 };
type Callback = func () -> ();
type Bio = 
 record {
   about: opt text;
   displayName: opt text;
   email: opt text;
   familyName: opt text;
   givenName: opt text;
   location: opt text;
   phone: opt text;
   socials: opt Socials;
   username: opt text;
 };
type AssetRequest = 
 variant {
   Put:
    record {
      callback: opt Callback;
      contentType: text;
      key: text;
      payload: variant {
                 Payload: blob;
                 StagedData;
               };
    };
   Remove: record {
             callback: opt Callback;
             key: text;
           };
   StagedWrite: WriteAsset;
 };
type Asset = 
 record {
   contentType: text;
   payload: vec blob;
 };
service : (InitOptions) -> anon_class_24_1
